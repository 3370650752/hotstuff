// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.3.0-devel
// 	protoc            v3.15.6
// source: internal/proto/hotstuff.proto

package proto

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(3 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 3)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.Configuration
	qspec QuorumSpec
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
func (c *Configuration) Nodes() []*Node {
	gorumsNodes := c.Configuration.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.Manager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.Manager = gorums.NewManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is require for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed. The QuorumSpec interface is also a ConfigOption.
// Nodes can be supplied using WithNodeMap or WithNodeList or WithNodeIDs.
func (m *Manager) NewConfiguration(opts ...gorums.ConfigOption) (c *Configuration, err error) {
	if len(opts) < 1 || len(opts) > 2 {
		return nil, fmt.Errorf("wrong number of options: %d", len(opts))
	}
	c = &Configuration{}
	for _, opt := range opts {
		switch v := opt.(type) {
		case gorums.NodeListOption:
			c.Configuration, err = gorums.NewConfiguration(m.Manager, v)
			if err != nil {
				return nil, err
			}
		case QuorumSpec:
			// Must be last since v may match QuorumSpec if it is interface{}
			c.qspec = v
		default:
			return nil, fmt.Errorf("unknown option type: %v", v)
		}
	}
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && c.qspec == nil {
		return nil, fmt.Errorf("missing required QuorumSpec")
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.Manager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

type Node struct {
	*gorums.Node
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Propose is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Propose(ctx context.Context, in *Block, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Propose",
	}

	c.Configuration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Timeout is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Timeout(ctx context.Context, in *TimeoutMsg, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Timeout",
	}

	c.Configuration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Fetch is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Fetch(ctx context.Context, in *BlockHash, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Fetch",
	}

	c.Configuration.Multicast(ctx, cd, opts...)
}

// QuorumSpec is the interface of quorum functions for Hotstuff.
type QuorumSpec interface {
	gorums.ConfigOption
}

// Hotstuff is the server-side API for the Hotstuff Service
type Hotstuff interface {
	Propose(context.Context, *Block)
	Vote(context.Context, *PartialCert)
	Timeout(context.Context, *TimeoutMsg)
	NewView(context.Context, *SyncInfo)
	Fetch(context.Context, *BlockHash)
	Deliver(context.Context, *Block)
}

func RegisterHotstuffServer(srv *gorums.Server, impl Hotstuff) {
	srv.RegisterHandler("proto.Hotstuff.Propose", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Block)
		impl.Propose(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Vote", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*PartialCert)
		impl.Vote(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Timeout", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*TimeoutMsg)
		impl.Timeout(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.NewView", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*SyncInfo)
		impl.NewView(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Fetch", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*BlockHash)
		impl.Fetch(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Deliver", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Block)
		impl.Deliver(ctx, req)
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Vote is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *Node) Vote(ctx context.Context, in *PartialCert, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "proto.Hotstuff.Vote",
	}

	n.Node.Unicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// NewView is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *Node) NewView(ctx context.Context, in *SyncInfo, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "proto.Hotstuff.NewView",
	}

	n.Node.Unicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Deliver is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *Node) Deliver(ctx context.Context, in *Block, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "proto.Hotstuff.Deliver",
	}

	n.Node.Unicast(ctx, cd, opts...)
}
