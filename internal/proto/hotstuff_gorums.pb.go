// Code generated by protoc-gen-gorums. DO NOT EDIT.

package proto

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.Configuration
	qspec QuorumSpec
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
func (c *Configuration) Nodes() []*Node {
	gorumsNodes := c.Configuration.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.Manager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.Manager = gorums.NewManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes.
// Nodes can be supplied using WithNodeMap or WithNodeList or WithNodeIDs.
func (m *Manager) NewConfiguration(qspec QuorumSpec, opts ...gorums.ConfigOption) (c *Configuration, err error) {
	c = &Configuration{
		qspec: qspec,
	}
	c.Configuration, err = gorums.NewConfiguration(m.Manager, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.Manager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

type Node struct {
	*gorums.Node
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Propose is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Propose(ctx context.Context, in *Block, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Propose",
	}

	c.Configuration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Timeout is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Timeout(ctx context.Context, in *TimeoutMsg, opts ...gorums.CallOption) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Timeout",
	}

	c.Configuration.Multicast(ctx, cd, opts...)
}

// QuorumSpec is the interface of quorum functions for Hotstuff.
type QuorumSpec interface {

	// FetchQF is the quorum function for the Fetch
	// quorum call method. The in parameter is the request object
	// supplied to the Fetch method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *BlockHash'.
	FetchQF(in *BlockHash, replies map[uint32]*Block) (*Block, bool)
}

// Fetch is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) Fetch(ctx context.Context, in *BlockHash) (resp *Block, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "proto.Hotstuff.Fetch",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Block, len(replies))
		for k, v := range replies {
			r[k] = v.(*Block)
		}
		return c.qspec.FetchQF(req.(*BlockHash), r)
	}

	res, err := c.Configuration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Block), err
}

// Hotstuff is the server-side API for the Hotstuff Service
type Hotstuff interface {
	Propose(context.Context, *Block)
	Vote(context.Context, *PartialCert)
	Timeout(context.Context, *TimeoutMsg)
	NewView(context.Context, *SyncInfo)
	Fetch(context.Context, *BlockHash, func(*Block, error))
}

func RegisterHotstuffServer(srv *gorums.Server, impl Hotstuff) {
	srv.RegisterHandler("proto.Hotstuff.Propose", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Block)
		impl.Propose(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Vote", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*PartialCert)
		impl.Vote(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Timeout", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*TimeoutMsg)
		impl.Timeout(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.NewView", func(ctx context.Context, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*SyncInfo)
		impl.NewView(ctx, req)
	})
	srv.RegisterHandler("proto.Hotstuff.Fetch", func(ctx context.Context, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*BlockHash)
		once := new(sync.Once)
		f := func(resp *Block, err error) {
			once.Do(func() {
				finished <- gorums.WrapMessage(in.Metadata, resp, err)
			})
		}
		impl.Fetch(ctx, req, f)
	})
}

type internalBlock struct {
	nid   uint32
	reply *Block
	err   error
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Vote is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *Node) Vote(ctx context.Context, in *PartialCert, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "proto.Hotstuff.Vote",
	}

	n.Node.Unicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// NewView is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *Node) NewView(ctx context.Context, in *SyncInfo, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "proto.Hotstuff.NewView",
	}

	n.Node.Unicast(ctx, cd, opts...)
}
