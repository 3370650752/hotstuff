syntax = "proto3";

package orchestrationpb;

import "gorums.proto";

option go_package = "github.com/relab/hotstuff/internal/proto/orchestrationpb";

// ReplicaOpts contains the confiugration options for a replica.
message ReplicaOpts {
  // The replica's ID.
  uint32 ID = 1;
  // The replica's private key.
  bytes PrivateKey = 3;
  // The replica's public key.
  bytes PublicKey = 16;
  // Determines whether TLS should be used.
  bool UseTLS = 4;
  // The replica's TLS certificate.
  optional bytes Certificate = 5;
  // The private key of the TLS certificate.
  optional bytes CertificateKey = 6;
  // The certificate authority that created the TLS certificates.
  optional bytes CertificateAuthority = 7;
  // The name of the crypto implementation to use.
  string Crypto = 8;
  // The name of the consensus implementation to use.
  string Consensus = 9;
  // The name of the leader election algorithm to use.
  string LeaderElection = 10;
  // The number of client commands that should be batched together.
  uint32 BatchSize = 11;
  // The timeout of the initial connection setup.
  float ConnectTimeout = 17;
  // The initial view duration in milliseconds.
  float InitialTimeout = 12;
  // The number of samples used to calculate view duration.
  uint32 TimeoutSamples = 13;
  // The number that the old view duration should be multiplied by when a new
  // timeout happens.
  float TimeoutMultiplier = 14;
  // The size of the replica's block cache.
  uint32 BlockCacheSize = 15;
}

// ReplicaInfo is the information that the replicas need about each other.
message ReplicaInfo {
  // The ID of the replica.
  uint32 ID = 1;
  // The IP address of the replica.
  string Address = 2;
  // The public key of the replica.
  bytes PublicKey = 3;
  // The port that other replicas should connect to.
  uint32 ReplicaPort = 4;
  // The port that clients should connect to.
  uint32 ClientPort = 5;
}

message ClientOpts {
  // The client's ID.
  uint32 ID = 1;
  // Determines whether TLS should be used.
  bool UseTLS = 4;
  // The maximum number of concurrent requests.
  uint32 MaxConcurrent = 8;
  // The size in bytes of each command.
  uint32 PayloadSize = 9;
  // The timeout of the initial connection.
  float ConnectTimeout = 10;
}

// ReplicaConfiguration is a configuration of replicas.
message ReplicaConfiguration { map<uint32, ReplicaInfo> Replicas = 1; }

service Orchestrator {
  // CreateReplica creates replicas on the workers.
  // The workers respond with the ports that the new replicas are listening on.
  rpc CreateReplica(CreateReplicaRequest) returns (CreateReplicaResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "ReplicaConfiguration";
  }

  // StartReplica starts the replicas.
  rpc StartReplica(StartReplicaRequest) returns (StartReplicaResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
  }

  rpc StopReplica(StopReplicaRequest) returns (StopReplicaResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
  }

  rpc StartClient(StartClientRequest) returns (StartClientResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
  }

  rpc StopClient(StopClientRequest) returns (StopClientResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
  }
}

// Replica messages

message CreateReplicaRequest { map<uint32, ReplicaOpts> Replicas = 1; }

message CreateReplicaResponse { map<uint32, ReplicaInfo> Replicas = 1; }

message StartReplicaRequest {
  // The replica IDs that should be started.
  repeated uint32 IDs = 1;
  // The configuration of replicas to connect to.
  map<uint32, ReplicaInfo> Configuration = 2;
}

message StartReplicaResponse {}

message StopReplicaRequest { repeated uint32 IDs = 1; }

message StopReplicaResponse {
  map<uint32, bytes> Hashes = 1;
}

// Client messages

message StartClientRequest {
  // The clients to create.
  map<uint32, ClientOpts> Clients = 1;
  // The certificate authority that created the TLS certificates.
  optional bytes CertificateAuthority = 7;
  // The replicas to connect to.
  map<uint32, ReplicaInfo> Configuration = 10;
}

message StartClientResponse {}

message StopClientRequest { repeated uint32 IDs = 1; }

message StopClientResponse {}
