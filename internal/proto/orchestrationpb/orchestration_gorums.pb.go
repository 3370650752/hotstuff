// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.5.0-devel
// 	protoc            v3.16.0
// source: internal/proto/orchestrationpb/orchestration.proto

package orchestrationpb

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	ordering "github.com/relab/gorums/ordering"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(5 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 5)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.Configuration
	qspec QuorumSpec
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
func (c *Configuration) Nodes() []*Node {
	nodes := make([]*Node, 0, c.Size())
	for _, n := range c.Configuration {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c Configuration) And(d *Configuration) gorums.NodeListOption {
	return c.Configuration.And(d.Configuration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c Configuration) Except(rm *Configuration) gorums.NodeListOption {
	return c.Configuration.Except(rm.Configuration)
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Manager maintains a connection pool of nodes on
// which quorum calls can be performed.
type Manager struct {
	*gorums.Manager
}

// NewManager returns a new Manager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewManager(opts ...gorums.ManagerOption) (mgr *Manager) {
	mgr = &Manager{}
	mgr.Manager = gorums.NewManager(opts...)
	return mgr
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed. The QuorumSpec interface is also a ConfigOption.
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *Manager) NewConfiguration(opts ...gorums.ConfigOption) (c *Configuration, err error) {
	if len(opts) < 1 || len(opts) > 2 {
		return nil, fmt.Errorf("wrong number of options: %d", len(opts))
	}
	c = &Configuration{}
	for _, opt := range opts {
		switch v := opt.(type) {
		case gorums.NodeListOption:
			c.Configuration, err = gorums.NewConfiguration(m.Manager, v)
			if err != nil {
				return nil, err
			}
		case QuorumSpec:
			// Must be last since v may match QuorumSpec if it is interface{}
			c.qspec = v
		default:
			return nil, fmt.Errorf("unknown option type: %v", v)
		}
	}
	// return an error if the QuorumSpec interface is not empty and no implementation was provided.
	var test interface{} = struct{}{}
	if _, empty := test.(QuorumSpec); !empty && c.qspec == nil {
		return nil, fmt.Errorf("missing required QuorumSpec")
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *Manager) Nodes() []*Node {
	gorumsNodes := m.Manager.Nodes()
	nodes := make([]*Node, 0, len(gorumsNodes))
	for _, n := range gorumsNodes {
		nodes = append(nodes, &Node{n})
	}
	return nodes
}

type Node struct {
	*gorums.Node
}

// StartReplica starts the replicas.
func (c *Configuration) StartReplica(ctx context.Context, in *StartReplicaRequest, f func(*StartReplicaRequest, uint32) *StartReplicaRequest) *CorrectableStreamReplicaStreamResponse {
	cd := gorums.CorrectableCallData{
		Message:      in,
		Method:       "orchestrationpb.Orchestrator.StartReplica",
		ServerStream: true,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, int, bool) {
		r := make(map[uint32]*ReplicaStreamResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*ReplicaStreamResponse)
		}
		return c.qspec.StartReplicaQF(req.(*StartReplicaRequest), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*StartReplicaRequest), nid)
	}

	corr := c.Configuration.CorrectableCall(ctx, cd)
	return &CorrectableStreamReplicaStreamResponse{corr}
}

// QuorumSpec is the interface of quorum functions for Orchestrator.
type QuorumSpec interface {
	gorums.ConfigOption

	// CreateReplicaQF is the quorum function for the CreateReplica
	// quorum call method. The in parameter is the request object
	// supplied to the CreateReplica method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *CreateReplicaRequest'.
	CreateReplicaQF(in *CreateReplicaRequest, replies map[uint32]*CreateReplicaResponse) (*ReplicaConfiguration, bool)

	// StartReplicaQF is the quorum function for the StartReplica
	// correctable stream quorum call method. The in parameter is the request object
	// supplied to the StartReplica method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *StartReplicaRequest'.
	StartReplicaQF(in *StartReplicaRequest, replies map[uint32]*ReplicaStreamResponse) (*ReplicaStreamResponse, int, bool)

	// StopReplicaQF is the quorum function for the StopReplica
	// quorum call method. The in parameter is the request object
	// supplied to the StopReplica method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *StopReplicaRequest'.
	StopReplicaQF(in *StopReplicaRequest, replies map[uint32]*StopReplicaResponse) (*StopReplicaResponse, bool)

	// StartClientQF is the quorum function for the StartClient
	// quorum call method. The in parameter is the request object
	// supplied to the StartClient method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *StartClientRequest'.
	StartClientQF(in *StartClientRequest, replies map[uint32]*StartClientResponse) (*StartClientResponse, bool)

	// StopClientQF is the quorum function for the StopClient
	// quorum call method. The in parameter is the request object
	// supplied to the StopClient method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *StopClientRequest'.
	StopClientQF(in *StopClientRequest, replies map[uint32]*StopClientResponse) (*StopClientResponse, bool)
}

// CreateReplica creates replicas on the workers.
// The workers respond with the ports that the new replicas are listening on.
func (c *Configuration) CreateReplica(ctx context.Context, in *CreateReplicaRequest, f func(*CreateReplicaRequest, uint32) *CreateReplicaRequest) (resp *ReplicaConfiguration, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "orchestrationpb.Orchestrator.CreateReplica",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*CreateReplicaResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*CreateReplicaResponse)
		}
		return c.qspec.CreateReplicaQF(req.(*CreateReplicaRequest), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*CreateReplicaRequest), nid)
	}

	res, err := c.Configuration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*ReplicaConfiguration), err
}

// StopReplica is a quorum call invoked on each node in configuration c,
// with the argument returned by the provided function f, and returns the combined result.
// The per node function f receives a copy of the StopReplicaRequest request argument and
// returns a StopReplicaRequest manipulated to be passed to the given nodeID.
// The function f must be thread-safe.
func (c *Configuration) StopReplica(ctx context.Context, in *StopReplicaRequest, f func(*StopReplicaRequest, uint32) *StopReplicaRequest) (resp *StopReplicaResponse, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "orchestrationpb.Orchestrator.StopReplica",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*StopReplicaResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*StopReplicaResponse)
		}
		return c.qspec.StopReplicaQF(req.(*StopReplicaRequest), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*StopReplicaRequest), nid)
	}

	res, err := c.Configuration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*StopReplicaResponse), err
}

// StartClient is a quorum call invoked on each node in configuration c,
// with the argument returned by the provided function f, and returns the combined result.
// The per node function f receives a copy of the StartClientRequest request argument and
// returns a StartClientRequest manipulated to be passed to the given nodeID.
// The function f must be thread-safe.
func (c *Configuration) StartClient(ctx context.Context, in *StartClientRequest, f func(*StartClientRequest, uint32) *StartClientRequest) (resp *StartClientResponse, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "orchestrationpb.Orchestrator.StartClient",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*StartClientResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*StartClientResponse)
		}
		return c.qspec.StartClientQF(req.(*StartClientRequest), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*StartClientRequest), nid)
	}

	res, err := c.Configuration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*StartClientResponse), err
}

// StopClient is a quorum call invoked on each node in configuration c,
// with the argument returned by the provided function f, and returns the combined result.
// The per node function f receives a copy of the StopClientRequest request argument and
// returns a StopClientRequest manipulated to be passed to the given nodeID.
// The function f must be thread-safe.
func (c *Configuration) StopClient(ctx context.Context, in *StopClientRequest, f func(*StopClientRequest, uint32) *StopClientRequest) (resp *StopClientResponse, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "orchestrationpb.Orchestrator.StopClient",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*StopClientResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*StopClientResponse)
		}
		return c.qspec.StopClientQF(req.(*StopClientRequest), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*StopClientRequest), nid)
	}

	res, err := c.Configuration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*StopClientResponse), err
}

// Orchestrator is the server-side API for the Orchestrator Service
type Orchestrator interface {
	CreateReplica(ctx gorums.ServerCtx, request *CreateReplicaRequest) (response *CreateReplicaResponse, err error)
	StartReplica(ctx gorums.ServerCtx, request *StartReplicaRequest, send func(response *ReplicaStreamResponse) error) error
	StopReplica(ctx gorums.ServerCtx, request *StopReplicaRequest) (response *StopReplicaResponse, err error)
	StartClient(ctx gorums.ServerCtx, request *StartClientRequest) (response *StartClientResponse, err error)
	StopClient(ctx gorums.ServerCtx, request *StopClientRequest) (response *StopClientResponse, err error)
}

func RegisterOrchestratorServer(srv *gorums.Server, impl Orchestrator) {
	srv.RegisterHandler("orchestrationpb.Orchestrator.CreateReplica", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CreateReplicaRequest)
		defer ctx.Release()
		resp, err := impl.CreateReplica(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("orchestrationpb.Orchestrator.StartReplica", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*StartReplicaRequest)
		defer ctx.Release()
		err := impl.StartReplica(ctx, req, func(resp *ReplicaStreamResponse) error {
			// create a copy of the metadata, to avoid a data race between WrapMessage and SendMsg
			md := proto.Clone(in.Metadata)
			return gorums.SendMessage(ctx, finished, gorums.WrapMessage(md.(*ordering.Metadata), resp, nil))
		})
		if err != nil {
			gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, nil, err))
		}
	})
	srv.RegisterHandler("orchestrationpb.Orchestrator.StopReplica", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*StopReplicaRequest)
		defer ctx.Release()
		resp, err := impl.StopReplica(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("orchestrationpb.Orchestrator.StartClient", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*StartClientRequest)
		defer ctx.Release()
		resp, err := impl.StartClient(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("orchestrationpb.Orchestrator.StopClient", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*StopClientRequest)
		defer ctx.Release()
		resp, err := impl.StopClient(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}

type internalCreateReplicaResponse struct {
	nid   uint32
	reply *CreateReplicaResponse
	err   error
}

type internalReplicaStreamResponse struct {
	nid   uint32
	reply *ReplicaStreamResponse
	err   error
}

type internalStartClientResponse struct {
	nid   uint32
	reply *StartClientResponse
	err   error
}

type internalStopClientResponse struct {
	nid   uint32
	reply *StopClientResponse
	err   error
}

type internalStopReplicaResponse struct {
	nid   uint32
	reply *StopReplicaResponse
	err   error
}

// CorrectableStreamReplicaStreamResponse is a correctable object for processing replies.
type CorrectableStreamReplicaStreamResponse struct {
	*gorums.Correctable
}

// Get returns the reply, level and any error associated with the
// called method. The method does not block until a (possibly
// intermediate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *CorrectableStreamReplicaStreamResponse) Get() (*ReplicaStreamResponse, int, error) {
	resp, level, err := c.Correctable.Get()
	if err != nil {
		return nil, level, err
	}
	return resp.(*ReplicaStreamResponse), level, err
}
