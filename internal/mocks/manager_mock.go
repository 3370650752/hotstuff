// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff (interfaces: Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hotstuff "github.com/relab/hotstuff"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockManager) Fetch(arg0 context.Context, arg1 hotstuff.Hash) (*hotstuff.Block, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*hotstuff.Block)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockManagerMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockManager)(nil).Fetch), arg0, arg1)
}

// Len mocks base method.
func (m *MockManager) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockManagerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockManager)(nil).Len))
}

// Propose mocks base method.
func (m *MockManager) Propose(arg0 *hotstuff.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", arg0)
}

// Propose indicates an expected call of Propose.
func (mr *MockManagerMockRecorder) Propose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockManager)(nil).Propose), arg0)
}

// QuorumSize mocks base method.
func (m *MockManager) QuorumSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuorumSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// QuorumSize indicates an expected call of QuorumSize.
func (mr *MockManagerMockRecorder) QuorumSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuorumSize", reflect.TypeOf((*MockManager)(nil).QuorumSize))
}

// Replica mocks base method.
func (m *MockManager) Replica(arg0 hotstuff.ID) (hotstuff.Replica, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replica", arg0)
	ret0, _ := ret[0].(hotstuff.Replica)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Replica indicates an expected call of Replica.
func (mr *MockManagerMockRecorder) Replica(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replica", reflect.TypeOf((*MockManager)(nil).Replica), arg0)
}

// Replicas mocks base method.
func (m *MockManager) Replicas() map[hotstuff.ID]hotstuff.Replica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].(map[hotstuff.ID]hotstuff.Replica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockManagerMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockManager)(nil).Replicas))
}

// Timeout mocks base method.
func (m *MockManager) Timeout(arg0 hotstuff.TimeoutMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Timeout", arg0)
}

// Timeout indicates an expected call of Timeout.
func (mr *MockManagerMockRecorder) Timeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockManager)(nil).Timeout), arg0)
}
