// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff (interfaces: ViewSynchronizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hotstuff "github.com/relab/hotstuff"
)

// MockViewSynchronizer is a mock of ViewSynchronizer interface.
type MockViewSynchronizer struct {
	ctrl     *gomock.Controller
	recorder *MockViewSynchronizerMockRecorder
}

// MockViewSynchronizerMockRecorder is the mock recorder for MockViewSynchronizer.
type MockViewSynchronizerMockRecorder struct {
	mock *MockViewSynchronizer
}

// NewMockViewSynchronizer creates a new mock instance.
func NewMockViewSynchronizer(ctrl *gomock.Controller) *MockViewSynchronizer {
	mock := &MockViewSynchronizer{ctrl: ctrl}
	mock.recorder = &MockViewSynchronizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewSynchronizer) EXPECT() *MockViewSynchronizerMockRecorder {
	return m.recorder
}

// AdvanceView mocks base method.
func (m *MockViewSynchronizer) AdvanceView(arg0 hotstuff.SyncInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdvanceView", arg0)
}

// AdvanceView indicates an expected call of AdvanceView.
func (mr *MockViewSynchronizerMockRecorder) AdvanceView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceView", reflect.TypeOf((*MockViewSynchronizer)(nil).AdvanceView), arg0)
}

// OnNewView mocks base method.
func (m *MockViewSynchronizer) OnNewView(arg0 hotstuff.NewViewMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewView", arg0)
}

// OnNewView indicates an expected call of OnNewView.
func (mr *MockViewSynchronizerMockRecorder) OnNewView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewView", reflect.TypeOf((*MockViewSynchronizer)(nil).OnNewView), arg0)
}

// OnRemoteTimeout mocks base method.
func (m *MockViewSynchronizer) OnRemoteTimeout(arg0 hotstuff.TimeoutMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemoteTimeout", arg0)
}

// OnRemoteTimeout indicates an expected call of OnRemoteTimeout.
func (mr *MockViewSynchronizerMockRecorder) OnRemoteTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemoteTimeout", reflect.TypeOf((*MockViewSynchronizer)(nil).OnRemoteTimeout), arg0)
}

// Start mocks base method.
func (m *MockViewSynchronizer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockViewSynchronizerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockViewSynchronizer)(nil).Start))
}

// Stop mocks base method.
func (m *MockViewSynchronizer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockViewSynchronizerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockViewSynchronizer)(nil).Stop))
}

// View mocks base method.
func (m *MockViewSynchronizer) View() hotstuff.View {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View")
	ret0, _ := ret[0].(hotstuff.View)
	return ret0
}

// View indicates an expected call of View.
func (mr *MockViewSynchronizerMockRecorder) View() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockViewSynchronizer)(nil).View))
}
