// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotstuff.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/relab/gorums"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LeaderUpdate struct {
	QC                   *QuorumCert `protobuf:"bytes,1,opt,name=QC,proto3" json:"QC,omitempty"`
	Sig                  *PartialSig `protobuf:"bytes,2,opt,name=Sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LeaderUpdate) Reset()      { *m = LeaderUpdate{} }
func (*LeaderUpdate) ProtoMessage() {}
func (*LeaderUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{0}
}
func (m *LeaderUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaderUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaderUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderUpdate.Merge(m, src)
}
func (m *LeaderUpdate) XXX_Size() int {
	return m.Size()
}
func (m *LeaderUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderUpdate proto.InternalMessageInfo

func (m *LeaderUpdate) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

func (m *LeaderUpdate) GetSig() *PartialSig {
	if m != nil {
		return m.Sig
	}
	return nil
}

type HSNode struct {
	ParentHash           []byte      `protobuf:"bytes,1,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	Command              []byte      `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	QC                   *QuorumCert `protobuf:"bytes,3,opt,name=QC,proto3" json:"QC,omitempty"`
	Height               int64       `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HSNode) Reset()      { *m = HSNode{} }
func (*HSNode) ProtoMessage() {}
func (*HSNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{1}
}
func (m *HSNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HSNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HSNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HSNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HSNode.Merge(m, src)
}
func (m *HSNode) XXX_Size() int {
	return m.Size()
}
func (m *HSNode) XXX_DiscardUnknown() {
	xxx_messageInfo_HSNode.DiscardUnknown(m)
}

var xxx_messageInfo_HSNode proto.InternalMessageInfo

func (m *HSNode) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *HSNode) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *HSNode) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

func (m *HSNode) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type PartialSig struct {
	ReplicaID            int32    `protobuf:"varint,1,opt,name=ReplicaID,proto3" json:"ReplicaID,omitempty"`
	R                    []byte   `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	S                    []byte   `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartialSig) Reset()      { *m = PartialSig{} }
func (*PartialSig) ProtoMessage() {}
func (*PartialSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{2}
}
func (m *PartialSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartialSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartialSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartialSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartialSig.Merge(m, src)
}
func (m *PartialSig) XXX_Size() int {
	return m.Size()
}
func (m *PartialSig) XXX_DiscardUnknown() {
	xxx_messageInfo_PartialSig.DiscardUnknown(m)
}

var xxx_messageInfo_PartialSig proto.InternalMessageInfo

func (m *PartialSig) GetReplicaID() int32 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *PartialSig) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PartialSig) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PartialCert struct {
	Sig                  *PartialSig `protobuf:"bytes,1,opt,name=Sig,proto3" json:"Sig,omitempty"`
	Hash                 []byte      `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PartialCert) Reset()      { *m = PartialCert{} }
func (*PartialCert) ProtoMessage() {}
func (*PartialCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{3}
}
func (m *PartialCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartialCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartialCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartialCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartialCert.Merge(m, src)
}
func (m *PartialCert) XXX_Size() int {
	return m.Size()
}
func (m *PartialCert) XXX_DiscardUnknown() {
	xxx_messageInfo_PartialCert.DiscardUnknown(m)
}

var xxx_messageInfo_PartialCert proto.InternalMessageInfo

func (m *PartialCert) GetSig() *PartialSig {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *PartialCert) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type QuorumCert struct {
	Sigs                 []*PartialSig `protobuf:"bytes,1,rep,name=Sigs,proto3" json:"Sigs,omitempty"`
	Hash                 []byte        `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QuorumCert) Reset()      { *m = QuorumCert{} }
func (*QuorumCert) ProtoMessage() {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{4}
}
func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return m.Size()
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetSigs() []*PartialSig {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func (m *QuorumCert) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*LeaderUpdate)(nil), "proto.LeaderUpdate")
	proto.RegisterType((*HSNode)(nil), "proto.HSNode")
	proto.RegisterType((*PartialSig)(nil), "proto.PartialSig")
	proto.RegisterType((*PartialCert)(nil), "proto.PartialCert")
	proto.RegisterType((*QuorumCert)(nil), "proto.QuorumCert")
}

func init() { proto.RegisterFile("hotstuff.proto", fileDescriptor_8517aa0e19c54851) }

var fileDescriptor_8517aa0e19c54851 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x49, 0x9a, 0xc0, 0xd4, 0x20, 0x31, 0x48, 0x91, 0x15, 0xd0, 0x2a, 0x98, 0x22,
	0xf5, 0xe4, 0x48, 0x85, 0x1b, 0x37, 0x5c, 0x4a, 0x90, 0x50, 0x95, 0xac, 0x45, 0xef, 0x9b, 0x66,
	0xb3, 0xb6, 0x14, 0x67, 0x2d, 0x7b, 0xad, 0x8a, 0x03, 0x52, 0x1f, 0x81, 0xc7, 0xe0, 0x05, 0xfa,
	0x02, 0x70, 0xe1, 0xd8, 0x23, 0x47, 0x6a, 0x2e, 0x1c, 0x91, 0x78, 0x01, 0xe4, 0xf5, 0x5a, 0x4d,
	0x45, 0xc9, 0x69, 0x77, 0x76, 0x66, 0xbe, 0xf9, 0x67, 0xf5, 0xc3, 0xfd, 0x48, 0xe9, 0x5c, 0x17,
	0xcb, 0xa5, 0x9f, 0x66, 0x4a, 0x2b, 0xdc, 0x31, 0xc7, 0x70, 0x4f, 0xc6, 0x3a, 0x2a, 0xe6, 0xfe,
	0xa9, 0x4a, 0xc6, 0x99, 0x58, 0xf1, 0xf9, 0x58, 0xaa, 0xac, 0x48, 0x72, 0x7b, 0xd4, 0xc5, 0xc3,
	0x47, 0x52, 0x29, 0xb9, 0x12, 0x63, 0x13, 0xcd, 0x8b, 0xe5, 0x58, 0x24, 0xa9, 0xfe, 0x50, 0x27,
	0xbd, 0x13, 0x70, 0xde, 0x09, 0xbe, 0x10, 0xd9, 0xfb, 0x74, 0xc1, 0xb5, 0xc0, 0x27, 0xd0, 0x9e,
	0x05, 0x2e, 0x19, 0x91, 0xfd, 0xdd, 0x83, 0x07, 0x75, 0x8d, 0x3f, 0x2b, 0x2a, 0x5c, 0x20, 0x32,
	0xcd, 0xda, 0xb3, 0x00, 0x9f, 0x42, 0x27, 0x8c, 0xa5, 0xdb, 0xbe, 0x51, 0x33, 0xe5, 0x99, 0x8e,
	0xf9, 0x2a, 0x8c, 0x25, 0xab, 0xb2, 0xde, 0x47, 0xe8, 0x4d, 0xc2, 0x63, 0xb5, 0x10, 0x48, 0x01,
	0xa6, 0x3c, 0x13, 0x6b, 0x3d, 0xe1, 0x79, 0x64, 0xc8, 0x0e, 0xdb, 0x78, 0x41, 0x17, 0xfa, 0x81,
	0x4a, 0x12, 0xbe, 0x5e, 0x18, 0xa4, 0xc3, 0x9a, 0xd0, 0x6a, 0xe9, 0x6c, 0xd3, 0x32, 0x80, 0xde,
	0x44, 0xc4, 0x32, 0xd2, 0x6e, 0x77, 0x44, 0xf6, 0x3b, 0xcc, 0x46, 0xde, 0x91, 0x19, 0x6a, 0x15,
	0xe1, 0x63, 0xb8, 0xcb, 0x44, 0xba, 0x8a, 0x4f, 0xf9, 0xdb, 0x43, 0xa3, 0x60, 0x87, 0x5d, 0x3f,
	0xa0, 0x03, 0x84, 0xd9, 0xd1, 0x84, 0x55, 0x51, 0x68, 0x66, 0x3a, 0x8c, 0x84, 0xde, 0x11, 0xec,
	0x5a, 0x4e, 0x35, 0xb2, 0x59, 0x9d, 0x6c, 0x5b, 0x1d, 0x11, 0xba, 0x66, 0xd5, 0x1a, 0x69, 0xee,
	0xde, 0x1b, 0x80, 0x6b, 0xe5, 0xf8, 0x0c, 0xba, 0x61, 0x2c, 0x73, 0x97, 0x8c, 0x3a, 0xb7, 0x73,
	0x4c, 0xfa, 0x36, 0xd0, 0xc1, 0x57, 0x02, 0x77, 0x26, 0xd6, 0x0c, 0x78, 0x08, 0xfd, 0x69, 0xa6,
	0x52, 0x95, 0x0b, 0xbc, 0x67, 0x21, 0xf5, 0xa7, 0x0f, 0xf1, 0x26, 0xb3, 0x9a, 0xea, 0x0d, 0xce,
	0x2f, 0x5c, 0xf2, 0xf9, 0xc2, 0x25, 0x5f, 0xfe, 0xb8, 0x9b, 0x6a, 0x5e, 0x40, 0xff, 0x58, 0x9c,
	0x9d, 0xc4, 0xe2, 0x0c, 0xff, 0xfd, 0xe5, 0xe1, 0xc0, 0xaf, 0xed, 0xe3, 0x37, 0xf6, 0xf1, 0x5f,
	0x57, 0xf6, 0xc1, 0x97, 0x8d, 0x71, 0x82, 0x88, 0xaf, 0xa5, 0xc0, 0x87, 0xb6, 0x75, 0xd3, 0x4d,
	0xff, 0x6b, 0x7e, 0xb5, 0x77, 0x79, 0x45, 0x5b, 0xdf, 0xaf, 0x68, 0xeb, 0xbc, 0xa4, 0xe4, 0x5b,
	0x49, 0xc9, 0x65, 0x49, 0xc9, 0x8f, 0x92, 0x92, 0x5f, 0x25, 0x6d, 0xfd, 0x2e, 0x29, 0xf9, 0xf4,
	0x93, 0xb6, 0xe6, 0x3d, 0xd3, 0xf5, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x23, 0x9e,
	0xd7, 0xfe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotstuffClient is the client API for Hotstuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotstuffClient interface {
	Propose(ctx context.Context, in *HSNode, opts ...grpc.CallOption) (*PartialCert, error)
	NewView(ctx context.Context, in *QuorumCert, opts ...grpc.CallOption) (*empty.Empty, error)
	LeaderChange(ctx context.Context, in *LeaderUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
}

type hotstuffClient struct {
	cc *grpc.ClientConn
}

func NewHotstuffClient(cc *grpc.ClientConn) HotstuffClient {
	return &hotstuffClient{cc}
}

func (c *hotstuffClient) Propose(ctx context.Context, in *HSNode, opts ...grpc.CallOption) (*PartialCert, error) {
	out := new(PartialCert)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) NewView(ctx context.Context, in *QuorumCert, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/NewView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) LeaderChange(ctx context.Context, in *LeaderUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/LeaderChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotstuffServer is the server API for Hotstuff service.
type HotstuffServer interface {
	Propose(context.Context, *HSNode) (*PartialCert, error)
	NewView(context.Context, *QuorumCert) (*empty.Empty, error)
	LeaderChange(context.Context, *LeaderUpdate) (*empty.Empty, error)
}

// UnimplementedHotstuffServer can be embedded to have forward compatible implementations.
type UnimplementedHotstuffServer struct {
}

func (*UnimplementedHotstuffServer) Propose(ctx context.Context, req *HSNode) (*PartialCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (*UnimplementedHotstuffServer) NewView(ctx context.Context, req *QuorumCert) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}
func (*UnimplementedHotstuffServer) LeaderChange(ctx context.Context, req *LeaderUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderChange not implemented")
}

func RegisterHotstuffServer(s *grpc.Server, srv HotstuffServer) {
	s.RegisterService(&_Hotstuff_serviceDesc, srv)
}

func _Hotstuff_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Propose(ctx, req.(*HSNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuorumCert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/NewView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).NewView(ctx, req.(*QuorumCert))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_LeaderChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).LeaderChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/LeaderChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).LeaderChange(ctx, req.(*LeaderUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hotstuff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hotstuff",
	HandlerType: (*HotstuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Hotstuff_Propose_Handler,
		},
		{
			MethodName: "NewView",
			Handler:    _Hotstuff_NewView_Handler,
		},
		{
			MethodName: "LeaderChange",
			Handler:    _Hotstuff_LeaderChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotstuff.proto",
}

func (m *LeaderUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sig != nil {
		{
			size, err := m.Sig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HSNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HSNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HSNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartialSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartialSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReplicaID != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartialCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartialCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sig != nil {
		{
			size, err := m.Sig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sigs) > 0 {
		for iNdEx := len(m.Sigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHotstuff(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintHotstuff(dAtA []byte, offset int, v uint64) int {
	offset -= sovHotstuff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LeaderUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Sig != nil {
		l = m.Sig.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *HSNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovHotstuff(uint64(m.Height))
	}
	return n
}

func (m *PartialSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaID != 0 {
		n += 1 + sovHotstuff(uint64(m.ReplicaID))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *PartialCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sig != nil {
		l = m.Sig.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *QuorumCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for _, e := range m.Sigs {
			l = e.Size()
			n += 1 + l + sovHotstuff(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func sovHotstuff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHotstuff(x uint64) (n int) {
	return sovHotstuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LeaderUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaderUpdate{`,
		`QC:` + strings.Replace(this.QC.String(), "QuorumCert", "QuorumCert", 1) + `,`,
		`Sig:` + strings.Replace(this.Sig.String(), "PartialSig", "PartialSig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HSNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HSNode{`,
		`ParentHash:` + fmt.Sprintf("%v", this.ParentHash) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`QC:` + strings.Replace(this.QC.String(), "QuorumCert", "QuorumCert", 1) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartialSig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartialSig{`,
		`ReplicaID:` + fmt.Sprintf("%v", this.ReplicaID) + `,`,
		`R:` + fmt.Sprintf("%v", this.R) + `,`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartialCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartialCert{`,
		`Sig:` + strings.Replace(this.Sig.String(), "PartialSig", "PartialSig", 1) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumCert) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSigs := "[]*PartialSig{"
	for _, f := range this.Sigs {
		repeatedStringForSigs += strings.Replace(f.String(), "PartialSig", "PartialSig", 1) + ","
	}
	repeatedStringForSigs += "}"
	s := strings.Join([]string{`&QuorumCert{`,
		`Sigs:` + repeatedStringForSigs + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHotstuff(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LeaderUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sig == nil {
				m.Sig = &PartialSig{}
			}
			if err := m.Sig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HSNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HSNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HSNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = append(m.Command[:0], dAtA[iNdEx:postIndex]...)
			if m.Command == nil {
				m.Command = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartialSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartialCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sig == nil {
				m.Sig = &PartialSig{}
			}
			if err := m.Sig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigs = append(m.Sigs, &PartialSig{})
			if err := m.Sigs[len(m.Sigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHotstuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHotstuff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHotstuff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHotstuff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHotstuff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHotstuff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHotstuff = fmt.Errorf("proto: unexpected end of group")
)
