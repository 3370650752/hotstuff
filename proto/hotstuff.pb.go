// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotstuff.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/relab/gorums"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	GENERIC    Type = 0
	PREPARE    Type = 1
	PRE_COMMIT Type = 2
	COMMIT     Type = 3
	DECIDE     Type = 4
	NEW_VIEW   Type = 5
)

var Type_name = map[int32]string{
	0: "GENERIC",
	1: "PREPARE",
	2: "PRE_COMMIT",
	3: "COMMIT",
	4: "DECIDE",
	5: "NEW_VIEW",
}

var Type_value = map[string]int32{
	"GENERIC":    0,
	"PREPARE":    1,
	"PRE_COMMIT": 2,
	"COMMIT":     3,
	"DECIDE":     4,
	"NEW_VIEW":   5,
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{0}
}

type Msg struct {
	Type                 Type        `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Type" json:"Type,omitempty"`
	ViewNumber           int32       `protobuf:"varint,2,opt,name=ViewNumber,proto3" json:"ViewNumber,omitempty"`
	Node                 *HSNode     `protobuf:"bytes,3,opt,name=Node,proto3" json:"Node,omitempty"`
	Justify              *QuorumCert `protobuf:"bytes,4,opt,name=Justify,proto3" json:"Justify,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetType() Type {
	if m != nil {
		return m.Type
	}
	return GENERIC
}

func (m *Msg) GetViewNumber() int32 {
	if m != nil {
		return m.ViewNumber
	}
	return 0
}

func (m *Msg) GetNode() *HSNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Msg) GetJustify() *QuorumCert {
	if m != nil {
		return m.Justify
	}
	return nil
}

type QuorumCert struct {
	Type                 Type     `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.Type" json:"Type,omitempty"`
	ViewNumber           int32    `protobuf:"varint,2,opt,name=ViewNumber,proto3" json:"ViewNumber,omitempty"`
	Node                 *HSNode  `protobuf:"bytes,3,opt,name=Node,proto3" json:"Node,omitempty"`
	Sig                  string   `protobuf:"bytes,4,opt,name=Sig,proto3" json:"Sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuorumCert) Reset()      { *m = QuorumCert{} }
func (*QuorumCert) ProtoMessage() {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{1}
}
func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return m.Size()
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetType() Type {
	if m != nil {
		return m.Type
	}
	return GENERIC
}

func (m *QuorumCert) GetViewNumber() int32 {
	if m != nil {
		return m.ViewNumber
	}
	return 0
}

func (m *QuorumCert) GetNode() *HSNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *QuorumCert) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type HSNode struct {
	ParentHash           string   `protobuf:"bytes,1,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	Command              string   `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HSNode) Reset()      { *m = HSNode{} }
func (*HSNode) ProtoMessage() {}
func (*HSNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{2}
}
func (m *HSNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HSNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HSNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HSNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HSNode.Merge(m, src)
}
func (m *HSNode) XXX_Size() int {
	return m.Size()
}
func (m *HSNode) XXX_DiscardUnknown() {
	xxx_messageInfo_HSNode.DiscardUnknown(m)
}

var xxx_messageInfo_HSNode proto.InternalMessageInfo

func (m *HSNode) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *HSNode) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8517aa0e19c54851, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("proto.Type", Type_name, Type_value)
	proto.RegisterType((*Msg)(nil), "proto.Msg")
	proto.RegisterType((*QuorumCert)(nil), "proto.QuorumCert")
	proto.RegisterType((*HSNode)(nil), "proto.HSNode")
	proto.RegisterType((*Empty)(nil), "proto.Empty")
}

func init() { proto.RegisterFile("hotstuff.proto", fileDescriptor_8517aa0e19c54851) }

var fileDescriptor_8517aa0e19c54851 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0xf5, 0x34, 0x4e, 0xdc, 0xfc, 0x94, 0xc8, 0xcc, 0xca, 0xea, 0x62, 0x08, 0xa6, 0x8b, 0x00,
	0x52, 0x2a, 0x85, 0x13, 0x10, 0x77, 0x44, 0x8c, 0x64, 0x63, 0xa6, 0x55, 0x2a, 0xb1, 0xa9, 0xec,
	0x66, 0xe2, 0x58, 0xc2, 0x9d, 0xc8, 0x1e, 0xab, 0xca, 0xae, 0xe2, 0x04, 0xac, 0xb8, 0x09, 0x77,
	0x60, 0xd9, 0x25, 0x4b, 0x6a, 0x36, 0x2c, 0x39, 0x02, 0x9a, 0xb1, 0x23, 0xc2, 0x05, 0x58, 0xfd,
	0xf7, 0xdf, 0x7b, 0xf3, 0xe7, 0xfd, 0xd1, 0xc0, 0x70, 0x2d, 0x64, 0x29, 0xab, 0xd5, 0x6a, 0xb2,
	0x29, 0x84, 0x14, 0xb8, 0xab, 0xcb, 0xf1, 0x49, 0x9a, 0xc9, 0x75, 0x95, 0x4c, 0xae, 0x45, 0x7e,
	0x5a, 0xf0, 0x8f, 0x71, 0x72, 0x9a, 0x8a, 0xa2, 0xca, 0xcb, 0xb6, 0x34, 0x66, 0xf7, 0x0b, 0x82,
	0x4e, 0x50, 0xa6, 0xf8, 0x09, 0x98, 0x17, 0xdb, 0x0d, 0x77, 0xd0, 0x08, 0x8d, 0x87, 0xd3, 0x41,
	0xa3, 0x4e, 0x14, 0xc5, 0xb4, 0x80, 0x09, 0xc0, 0x22, 0xe3, 0xb7, 0x61, 0x95, 0x27, 0xbc, 0x70,
	0x0e, 0x46, 0x68, 0xdc, 0x65, 0x7b, 0x0c, 0x7e, 0x0a, 0x66, 0x28, 0x96, 0xdc, 0xe9, 0x8c, 0xd0,
	0x78, 0x30, 0x7d, 0xd4, 0x0e, 0x98, 0x9f, 0x2b, 0x92, 0x69, 0x09, 0xbf, 0x04, 0xeb, 0x6d, 0x55,
	0xca, 0x6c, 0xb5, 0x75, 0x4c, 0xed, 0x7a, 0xdc, 0xba, 0xde, 0x57, 0x2a, 0x92, 0xc7, 0x0b, 0xc9,
	0x76, 0x0e, 0xf7, 0x13, 0x02, 0xf8, 0xcb, 0xff, 0x97, 0x7c, 0x36, 0x74, 0xce, 0xb3, 0x54, 0x67,
	0xeb, 0x33, 0x05, 0xdd, 0x19, 0xf4, 0x1a, 0x87, 0x1a, 0x1f, 0xc5, 0x05, 0xbf, 0x91, 0xf3, 0xb8,
	0x5c, 0xeb, 0x14, 0x7d, 0xb6, 0xc7, 0x60, 0x07, 0x2c, 0x4f, 0xe4, 0x79, 0x7c, 0xb3, 0xd4, 0x77,
	0xf7, 0xd9, 0xae, 0x75, 0x2d, 0xe8, 0xd2, 0x7c, 0x23, 0xb7, 0x2f, 0x16, 0xcd, 0x0a, 0x78, 0x00,
	0xd6, 0x1b, 0x1a, 0x52, 0xe6, 0x7b, 0xb6, 0xa1, 0x9a, 0x88, 0xd1, 0xe8, 0x35, 0xa3, 0x36, 0xc2,
	0x43, 0x80, 0x88, 0xd1, 0x2b, 0xef, 0x5d, 0x10, 0xf8, 0x17, 0xf6, 0x01, 0x06, 0xe8, 0xb5, 0xb8,
	0xa3, 0xf0, 0x19, 0xf5, 0xfc, 0x33, 0x6a, 0x9b, 0xf8, 0x08, 0x0e, 0x43, 0x7a, 0x79, 0xb5, 0xf0,
	0xe9, 0xa5, 0xdd, 0x9d, 0x7e, 0x80, 0xc3, 0x79, 0xfb, 0x03, 0xf0, 0x73, 0xe8, 0xcf, 0x0a, 0x11,
	0x2f, 0xaf, 0xe3, 0x52, 0x62, 0x68, 0x97, 0x0c, 0xca, 0xf4, 0x78, 0x0f, 0xbb, 0xe6, 0xdd, 0x57,
	0x07, 0xe1, 0x67, 0x60, 0x85, 0xfc, 0x56, 0xbd, 0xd0, 0x3f, 0xc6, 0xa3, 0x16, 0xeb, 0xcc, 0xb3,
	0x93, 0xfb, 0x07, 0x62, 0x7c, 0x7f, 0x20, 0xc6, 0x5d, 0x4d, 0xd0, 0xb7, 0x9a, 0xa0, 0xfb, 0x9a,
	0xa0, 0x1f, 0x35, 0x41, 0xbf, 0x6a, 0x62, 0xfc, 0xae, 0x09, 0xfa, 0xfc, 0x93, 0x18, 0x49, 0x4f,
	0x1f, 0x79, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xdf, 0xea, 0x83, 0x8a, 0x02, 0x00, 0x00,
}

func (x Type) String() string {
	s, ok := Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HotstuffClient is the client API for Hotstuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HotstuffClient interface {
	Broadcast(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	NewView(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
}

type hotstuffClient struct {
	cc *grpc.ClientConn
}

func NewHotstuffClient(cc *grpc.ClientConn) HotstuffClient {
	return &hotstuffClient{cc}
}

func (c *hotstuffClient) Broadcast(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotstuffClient) NewView(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Hotstuff/NewView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotstuffServer is the server API for Hotstuff service.
type HotstuffServer interface {
	Broadcast(context.Context, *Msg) (*Msg, error)
	NewView(context.Context, *Msg) (*Empty, error)
}

// UnimplementedHotstuffServer can be embedded to have forward compatible implementations.
type UnimplementedHotstuffServer struct {
}

func (*UnimplementedHotstuffServer) Broadcast(ctx context.Context, req *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedHotstuffServer) NewView(ctx context.Context, req *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}

func RegisterHotstuffServer(s *grpc.Server, srv HotstuffServer) {
	s.RegisterService(&_Hotstuff_serviceDesc, srv)
}

func _Hotstuff_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).Broadcast(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotstuff_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotstuffServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hotstuff/NewView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotstuffServer).NewView(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hotstuff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hotstuff",
	HandlerType: (*HotstuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Hotstuff_Broadcast_Handler,
		},
		{
			MethodName: "NewView",
			Handler:    _Hotstuff_NewView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotstuff.proto",
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Justify != nil {
		{
			size, err := m.Justify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewNumber != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ViewNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuorumCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x22
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHotstuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewNumber != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.ViewNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHotstuff(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HSNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HSNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HSNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintHotstuff(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintHotstuff(dAtA []byte, offset int, v uint64) int {
	offset -= sovHotstuff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHotstuff(uint64(m.Type))
	}
	if m.ViewNumber != 0 {
		n += 1 + sovHotstuff(uint64(m.ViewNumber))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	if m.Justify != nil {
		l = m.Justify.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *QuorumCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHotstuff(uint64(m.Type))
	}
	if m.ViewNumber != 0 {
		n += 1 + sovHotstuff(uint64(m.ViewNumber))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *HSNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovHotstuff(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovHotstuff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHotstuff(x uint64) (n int) {
	return sovHotstuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ViewNumber:` + fmt.Sprintf("%v", this.ViewNumber) + `,`,
		`Node:` + strings.Replace(this.Node.String(), "HSNode", "HSNode", 1) + `,`,
		`Justify:` + strings.Replace(this.Justify.String(), "QuorumCert", "QuorumCert", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuorumCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuorumCert{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ViewNumber:` + fmt.Sprintf("%v", this.ViewNumber) + `,`,
		`Node:` + strings.Replace(this.Node.String(), "HSNode", "HSNode", 1) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HSNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HSNode{`,
		`ParentHash:` + fmt.Sprintf("%v", this.ParentHash) + `,`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func valueToStringHotstuff(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewNumber", wireType)
			}
			m.ViewNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &HSNode{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Justify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Justify == nil {
				m.Justify = &QuorumCert{}
			}
			if err := m.Justify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewNumber", wireType)
			}
			m.ViewNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &HSNode{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HSNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HSNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HSNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHotstuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHotstuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHotstuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHotstuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHotstuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHotstuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotstuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHotstuff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHotstuff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHotstuff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHotstuff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHotstuff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHotstuff = fmt.Errorf("proto: unexpected end of group")
)
